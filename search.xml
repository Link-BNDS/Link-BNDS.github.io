<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>hello world</p>
]]></content>
  </entry>
  <entry>
    <title>my_first_LaTeX_homework</title>
    <url>/my-first-LaTeX-homework/</url>
    <content><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>I heard about LaTeX from Ben. He told me our schoolâ€™s previous Calculus 3 teacher stipulated that students in his class must use LaTeX to write their homework.  At the beginning of summer vacation, I started to learn some basic knowledge about LaTeX. Thanks to my C++ knowledge, I have learned some of the rudimentary knowledge about LaTeX. However, if some complex demands appear, I could only use it as a Google-based language(LOL).<br>This is my AP Statistics Course Summer Homework. Made by LaTeX, edited by VS code.  </p>
<span id="more"></span>
<h4 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h4><pre class="line-numbers language-none"><code class="language-none">\documentclass&#123;article&#125;
\title&#123;AP Statistics Summer Homework&#125;
\author&#123;Link Li\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;August 11,2021&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;
\usepackage&#123;boondox-calo&#125;
\usepackage&#123;fontspec&#125;

\setmainfont&#123;LinLibertine_R.otf&#125;[BoldFont&#x3D;LinLibertine_RZ.otf,ItalicFont&#x3D;LinLibertine_RI.otf,BoldItalicFont&#x3D;LinLibertine_RZI.otf,]
\setsansfont&#123;LinBiolinum_R.otf&#125;[BoldFont&#x3D;LinBiolinum_RB.otf,ItalicFont&#x3D;LinBiolinum_RI.otf,BoldItalicFont&#x3D;LinBiolinum_RBO.otf]
\setmonofont&#123;LinLibertine_M.otf&#125;[BoldFont&#x3D;LinLibertine_MB.otf,ItalicFont&#x3D;LinLibertine_MO.otf,BoldItalicFont&#x3D;LinLibertine_MBO.otf]


\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;63&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;63&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;63&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;63&#125;&#125;&#125;
&#125;
\begin&#123;document&#125;

\maketitle

\section&#123;Concepts \&amp; Definitions \&amp; Examples&#125;
\subsection&#123;Why Study Statistics?&#125;
1. Extract information from tables, charts, and graphs.\\
2. Follow numerical arguments.\\
3. Understand the basics of how data should be gathered, summarized, and analyzed to draw statistical conclusions.\\
\underline&#123;Example&#125;: No example.
\subsection&#123;The Nature and Role of Variability&#125;
\paragraph&#123;Variability&#125;
is a kind of notion about natural diversity. \\
\underline&#123;Example&#125;: People nowadays have 56 types of genders(A gender study student told me).
\paragraph&#123;Histogram&#125; 
is a bar graph-like representation of data that buckets a range of outcomes into columns along the x-axis. The y-axis represents the number count or percentage of occurrences in the data for each column and can be used to visualize data distributions.\\
\underline&#123;Example&#125;:

\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;histogram.png&#125;
\caption&#123;A Sample of Histogram&#125;
\end&#123;figure&#125;

\subsection&#123;Statistics and the Data Analysis Process&#125;
\paragraph&#123;Process of collecting data&#125;
: We need to follow these six steps:\\
1. Understanding the nature of the problem.\\
2. Deciding what to measure and how to measure it.\\
3. Data collection.\\
4. Data summarization and preliminary analysis.\\
5. Formal data analysis. \\
6. Interpretation of results.\\
\underline&#123;Example&#125;: No.\\

\paragraph&#123;Population of Interest&#125;
The entire collection of individuals or objects about which information is desired is called the population of interest.
\\
\underline&#123;Example&#125;: If I want to find out the the effect of allowing BNDS students to make boy&#x2F;girl friends at school. BNDS students is the population of interest in this case. 
\paragraph&#123;Sample&#125;
A sample is a subset of the population, selected for study.
\\
\underline&#123;Example&#125;: There are approximately 900 students in BNDS International Department, I select 30 students for my investigation.

\paragraph&#123;Descriptive Statistics&#125;
is a branch of statistics about using methods to organize and summarize data.
\\
\underline&#123;Example&#125;: This is a defination of a branch subject so that I can&#39;t list a example.

\paragraph&#123;Inferential Statistics&#125;
is the second major branch of statistics about generalizing the conclusion from sample to the whole population.
\\
\underline&#123;Example&#125;: This is a defination of a branch subject so that I can&#39;t list a example.
\subsection&#123;Tpye of Data and Some Simple Graphical Displays&#125;

\paragraph&#123;Univariate Data Set&#125;
A data set consisting of observations on a single characteristic is a univariate data set.
\\
\underline&#123;Example&#125;: All of the students&#39; height in BNDS.


\paragraph&#123;Categorical data&#125;
Individual observations are categorical responses (nonnumerical).
\\
\underline&#123;Example&#125;: Gender types.


\paragraph&#123;Numerical data&#125;
Individual observations are numerical (quantitative) in nature.
\\
\underline&#123;Example&#125;: GPA of each students in BNDS.


\paragraph&#123;Discrete \&amp; Continuous Data Set&#125;
A numerical variable results in discrete data if the possible values of the variable correspond to isolated points on the number line. 
\\
A numerical variable results in continuous data if the set of possible values forms an entire interval on the number line.
\\
\underline&#123;Example&#125;: Discrete: The set of students enrollment of each high schools in Beijing.
\\
\underline&#123;Example&#125;: Continuous: The set of height of students in BNDS.


\paragraph&#123;Univariate, bivariate and multivariate data&#125;

Each observation consists of one (univariate), two (bivariate), or two or more (multivariate) responses or values.

\underline&#123;Example&#125;: Heights. Heighs, age. Heighs, age, GPA, etc.




\paragraph&#123;Relative Frequency&#125;

The relative frequency for a particular category is calculated as
\[
    \mathcal&#123;relative\ frequency &#x3D; \frac&#123;frequency&#125;&#123;number\ of\ obervations\ in\ the\ data\ set&#125;&#125;
\]




\paragraph&#123;Bar Charts&#125;
A bar chart is a graph of a frequency distribution of categorical data.
\\
\underline&#123;Example&#125;:
\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;bar.png&#125;
\end&#123;figure&#125;
    
\paragraph&#123;Dotplots&#125;
A dotplot is a simple way to display numerical data when the data set is reasonably 
small. Each observation is represented by a dot above the location corresponding to 
its value on a horizontal measurement scale. When a value occurs more than once, 
there is a dot for each occurrence and these dots are stacked vertically.
\\
\underline&#123;Example&#125;:
\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;dd.png&#125;
\end&#123;figure&#125;

\section&#123;PS&#125;
\subsection&#123;Website&#125;
\paragraph&#123;Welcome to my website: lzclink.com&#125;
\qrcode&#123;lzclink.com&#125;

\subsection&#123;Version&#125;
\paragraph&#123;Recent Version:&#125;
This is TeX, Version 3.141592653 (TeX Live 2021&#x2F;W32TeX) (preloaded format&#x3D;tex)
\subsection&#123;Editor&#125;
\paragraph&#123;Edit via Visual Studio Code&#125;
\subsection&#123;Daily Poem&#125;

\begin&#123;tikzpicture&#125;
    \node[text width&#x3D;8cm,align&#x3D;center](Text)&#123;%
    In visions of the dark night\\
    I have dreamed of joy departed-\\
    But a waking dream of life and light\
    Hath left me broken-hearted.\\

    Ah! what is not a dream by day\\
    To him whose eyes are cast \\
    On things around him with a ray \\
    Turned back upon the past? \\

    That holy dream- that holy dream,\\
    While all the world were chiding,\\
    Hath cheered me as a lovely beam\\
    A lonely spirit guiding.\\

    What though that light, thro&#39; storm and night,\\
    So trembled from afar- \\
    What could there be more purely bright \\
    In Truth&#39;s day-star? \\
    \vspace&#123;24pt&#125;
     A Dream (1827) by Edgar Allan Poe
    &#125; ;

    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(-.5cm,.5cm)&#125;,anchor&#x3D;north west](CNW)  at (Text.north west)
         &#123;\pgfornament[width&#x3D;1.75cm]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(.5cm,.5cm)&#125;,anchor&#x3D;north east](CNE)   at (Text.north east)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(-.5cm,-.5cm)&#125;,anchor&#x3D;south west](CSW) at (Text.south west)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(.5cm,-.5cm)&#125;,anchor&#x3D;south east](CSE)  at (Text.south east)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;61&#125;&#125;;
    \pgfornamenthline&#123;CNW&#125;&#123;CNE&#125;&#123;north&#125;&#123;87&#125;
    \pgfornamenthline&#123;CSW&#125;&#123;CSE&#125;&#123;south&#125;&#123;87&#125;
    \pgfornamentvline&#123;CNW&#125;&#123;CSW&#125;&#123;west&#125;&#123;87&#125;
    \pgfornamentvline&#123;CNE&#125;&#123;CSE&#125;&#123;east&#125;&#123;87&#125;
    \end&#123;tikzpicture&#125;

\end&#123;document&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p><img src="/img/sta1.png" alt="sta1"><br><img src="/img/sta2.png" alt="sta2"></p>
<h4 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h4>]]></content>
  </entry>
  <entry>
    <title>mental_assessment</title>
    <url>/mental-assessment/</url>
    <content><![CDATA[<p>A confirmatory program about one example from schoolâ€™s mathematical modeling class.<br>C++.</p>
<h4 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;Windows.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span></span><span class="token string">"Ofast"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token string">"inline"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token comment">//#pragma GCC optimize(3)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> <span class="token keyword">int</span> ct<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ck<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> fu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>
			fu<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		ck<span class="token operator">=</span>ck<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> fu<span class="token operator">*</span>ck<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>r<span class="token punctuation">;</span>
    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>mid<span class="token punctuation">)</span> 
			i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>mid<span class="token punctuation">)</span> 
			j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> 
		<span class="token function">qsort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> 
		<span class="token function">qsort</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">struct</span> <span class="token class-name">ans</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">double</span> normal<span class="token punctuation">,</span> tic<span class="token punctuation">,</span> minia<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">qu</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> x<span class="token punctuation">;</span>
	<span class="token keyword">return</span> x<span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> yy<span class="token operator">=</span><span class="token number">100.0000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//	freopen("in.txt","r",stdin);</span>
<span class="token comment">//	freopen("out.txt","w",stdout);	</span>
<span class="token comment">//	srand(time(0));	</span>
	<span class="token keyword">double</span> totalnormal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>totaltic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>totalminia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> meantotalnormal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> meantotaltic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> meantotalminia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	ans answer<span class="token punctuation">;</span>
	<span class="token keyword">double</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter the number of times you want to simulate"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Remember! for each times of simulation, the program will process 1e9 times random data."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"You had better enter a number less than 40."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"And please wait with patience."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
	<span class="token keyword">int</span> start<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> acc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>acc<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>acc<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">+</span>j<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token comment">//cout&lt;&lt;"h1"&lt;&lt;endl;</span>
				<span class="token keyword">double</span> k<span class="token operator">=</span><span class="token number">100</span><span class="token operator">-</span>i<span class="token operator">-</span>j<span class="token punctuation">;</span>
				<span class="token keyword">int</span> normal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> tic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
						<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>
						<span class="token comment">//cout&lt;&lt;p&lt;&lt;endl;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> 
							normal<span class="token operator">++</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>i<span class="token operator">&amp;&amp;</span>p<span class="token operator">&lt;</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span> 
							tic<span class="token operator">++</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>i<span class="token operator">+</span>j<span class="token operator">&amp;&amp;</span>p<span class="token operator">&lt;=</span><span class="token number">99</span><span class="token punctuation">)</span>
							minia<span class="token operator">++</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
					ct<span class="token punctuation">[</span>normal<span class="token punctuation">]</span><span class="token punctuation">[</span>tic<span class="token punctuation">]</span><span class="token punctuation">[</span>minia<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
					normal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					tic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					minia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
				<span class="token punctuation">&#125;</span> 	
				<span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">></span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					flag<span class="token operator">=</span>ct<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>normal<span class="token operator">=</span>i<span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>tic<span class="token operator">=</span>j<span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>minia<span class="token operator">=</span>k<span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token comment">//cout&lt;&lt;"h3"&lt;&lt;endl;</span>
				<span class="token function">memset</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 	<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		cout<span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>normal<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>tic<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>minia<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		totalnormal<span class="token operator">+=</span>answer<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>
		totaltic<span class="token operator">+=</span>answer<span class="token punctuation">.</span>tic<span class="token punctuation">;</span>
		totalminia<span class="token operator">+=</span>answer<span class="token punctuation">.</span>minia<span class="token punctuation">;</span>
		flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//cout&lt;&lt;meantotaltic&lt;&lt;endl;</span>
	meantotalnormal<span class="token operator">=</span>totalnormal<span class="token operator">/</span>n<span class="token punctuation">;</span>
	meantotaltic<span class="token operator">=</span>totaltic<span class="token operator">/</span>n<span class="token punctuation">;</span>
	meantotalminia<span class="token operator">=</span>totalminia<span class="token operator">/</span>n<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"average: "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"normal: "</span><span class="token operator">&lt;&lt;</span>meantotalnormal<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"tic: "</span><span class="token operator">&lt;&lt;</span>meantotaltic<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"minia: "</span><span class="token operator">&lt;&lt;</span>meantotalminia<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">int</span> timecost<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"time cost= "</span><span class="token operator">&lt;&lt;</span>timecost<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
</search>

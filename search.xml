<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>hello world</p>
]]></content>
  </entry>
  <entry>
    <title>my_first_LaTeX_homework</title>
    <url>/my-first-LaTeX-homework/</url>
    <content><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>I heard about LaTeX from Ben. He told me our school’s previous Calculus 3 teacher stipulated that students in his class must use LaTeX to write their homework.  At the beginning of summer vacation, I started to learn some basic knowledge about LaTeX. Thanks to my C++ knowledge, I have learned some of the rudimentary knowledge about LaTeX. However, if some complex demands appear, I could only use it as a Google-based language(LOL).<br>This is my AP Statistics Course Summer Homework. Made by LaTeX, edited by VS code.  </p>
<span id="more"></span>
<h4 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h4><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\documentclass&#123;article&#125;
\title&#123;AP Statistics Summer Homework&#125;
\author&#123;Link Li\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;August 11,2021&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;
\usepackage&#123;boondox-calo&#125;
\usepackage&#123;fontspec&#125;

\setmainfont&#123;LinLibertine_R.otf&#125;[BoldFont&#x3D;LinLibertine_RZ.otf,ItalicFont&#x3D;LinLibertine_RI.otf,BoldItalicFont&#x3D;LinLibertine_RZI.otf,]
\setsansfont&#123;LinBiolinum_R.otf&#125;[BoldFont&#x3D;LinBiolinum_RB.otf,ItalicFont&#x3D;LinBiolinum_RI.otf,BoldItalicFont&#x3D;LinBiolinum_RBO.otf]
\setmonofont&#123;LinLibertine_M.otf&#125;[BoldFont&#x3D;LinLibertine_MB.otf,ItalicFont&#x3D;LinLibertine_MO.otf,BoldItalicFont&#x3D;LinLibertine_MBO.otf]


\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;63&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;63&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;63&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;63&#125;&#125;&#125;
&#125;
\begin&#123;document&#125;

\maketitle

\section&#123;Concepts \&amp; Definitions \&amp; Examples&#125;
\subsection&#123;Why Study Statistics?&#125;
1. Extract information from tables, charts, and graphs.\\
2. Follow numerical arguments.\\
3. Understand the basics of how data should be gathered, summarized, and analyzed to draw statistical conclusions.\\
\underline&#123;Example&#125;: No example.
\subsection&#123;The Nature and Role of Variability&#125;
\paragraph&#123;Variability&#125;
is a kind of notion about natural diversity. \\
\underline&#123;Example&#125;: People nowadays have 56 types of genders(A gender study student told me).
\paragraph&#123;Histogram&#125; 
is a bar graph-like representation of data that buckets a range of outcomes into columns along the x-axis. The y-axis represents the number count or percentage of occurrences in the data for each column and can be used to visualize data distributions.\\
\underline&#123;Example&#125;:

\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;histogram.png&#125;
\caption&#123;A Sample of Histogram&#125;
\end&#123;figure&#125;

\subsection&#123;Statistics and the Data Analysis Process&#125;
\paragraph&#123;Process of collecting data&#125;
: We need to follow these six steps:\\
1. Understanding the nature of the problem.\\
2. Deciding what to measure and how to measure it.\\
3. Data collection.\\
4. Data summarization and preliminary analysis.\\
5. Formal data analysis. \\
6. Interpretation of results.\\
\underline&#123;Example&#125;: No.\\

\paragraph&#123;Population of Interest&#125;
The entire collection of individuals or objects about which information is desired is called the population of interest.
\\
\underline&#123;Example&#125;: If I want to find out the the effect of allowing BNDS students to make boy&#x2F;girl friends at school. BNDS students is the population of interest in this case. 
\paragraph&#123;Sample&#125;
A sample is a subset of the population, selected for study.
\\
\underline&#123;Example&#125;: There are approximately 900 students in BNDS International Department, I select 30 students for my investigation.

\paragraph&#123;Descriptive Statistics&#125;
is a branch of statistics about using methods to organize and summarize data.
\\
\underline&#123;Example&#125;: This is a defination of a branch subject so that I can&#39;t list a example.

\paragraph&#123;Inferential Statistics&#125;
is the second major branch of statistics about generalizing the conclusion from sample to the whole population.
\\
\underline&#123;Example&#125;: This is a defination of a branch subject so that I can&#39;t list a example.
\subsection&#123;Tpye of Data and Some Simple Graphical Displays&#125;

\paragraph&#123;Univariate Data Set&#125;
A data set consisting of observations on a single characteristic is a univariate data set.
\\
\underline&#123;Example&#125;: All of the students&#39; height in BNDS.


\paragraph&#123;Categorical data&#125;
Individual observations are categorical responses (nonnumerical).
\\
\underline&#123;Example&#125;: Gender types.


\paragraph&#123;Numerical data&#125;
Individual observations are numerical (quantitative) in nature.
\\
\underline&#123;Example&#125;: GPA of each students in BNDS.


\paragraph&#123;Discrete \&amp; Continuous Data Set&#125;
A numerical variable results in discrete data if the possible values of the variable correspond to isolated points on the number line. 
\\
A numerical variable results in continuous data if the set of possible values forms an entire interval on the number line.
\\
\underline&#123;Example&#125;: Discrete: The set of students enrollment of each high schools in Beijing.
\\
\underline&#123;Example&#125;: Continuous: The set of height of students in BNDS.


\paragraph&#123;Univariate, bivariate and multivariate data&#125;

Each observation consists of one (univariate), two (bivariate), or two or more (multivariate) responses or values.

\underline&#123;Example&#125;: Heights. Heighs, age. Heighs, age, GPA, etc.




\paragraph&#123;Relative Frequency&#125;

The relative frequency for a particular category is calculated as
\[
    \mathcal&#123;relative\ frequency &#x3D; \frac&#123;frequency&#125;&#123;number\ of\ obervations\ in\ the\ data\ set&#125;&#125;
\]




\paragraph&#123;Bar Charts&#125;
A bar chart is a graph of a frequency distribution of categorical data.
\\
\underline&#123;Example&#125;:
\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;bar.png&#125;
\end&#123;figure&#125;
    
\paragraph&#123;Dotplots&#125;
A dotplot is a simple way to display numerical data when the data set is reasonably 
small. Each observation is represented by a dot above the location corresponding to 
its value on a horizontal measurement scale. When a value occurs more than once, 
there is a dot for each occurrence and these dots are stacked vertically.
\\
\underline&#123;Example&#125;:
\begin&#123;figure&#125;[htbp]
\centering
\includegraphics[width&#x3D; .5\textwidth]&#123;dd.png&#125;
\end&#123;figure&#125;

\section&#123;PS&#125;
\subsection&#123;Website&#125;
\paragraph&#123;Welcome to my website: lzclink.com&#125;
\qrcode&#123;lzclink.com&#125;

\subsection&#123;Version&#125;
\paragraph&#123;Recent Version:&#125;
This is TeX, Version 3.141592653 (TeX Live 2021&#x2F;W32TeX) (preloaded format&#x3D;tex)
\subsection&#123;Editor&#125;
\paragraph&#123;Edit via Visual Studio Code&#125;
\subsection&#123;Daily Poem&#125;

\begin&#123;tikzpicture&#125;
    \node[text width&#x3D;8cm,align&#x3D;center](Text)&#123;%
    In visions of the dark night\\
    I have dreamed of joy departed-\\
    But a waking dream of life and light\
    Hath left me broken-hearted.\\

    Ah! what is not a dream by day\\
    To him whose eyes are cast \\
    On things around him with a ray \\
    Turned back upon the past? \\

    That holy dream- that holy dream,\\
    While all the world were chiding,\\
    Hath cheered me as a lovely beam\\
    A lonely spirit guiding.\\

    What though that light, thro&#39; storm and night,\\
    So trembled from afar- \\
    What could there be more purely bright \\
    In Truth&#39;s day-star? \\
    \vspace&#123;24pt&#125;
     A Dream (1827) by Edgar Allan Poe
    &#125; ;

    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(-.5cm,.5cm)&#125;,anchor&#x3D;north west](CNW)  at (Text.north west)
         &#123;\pgfornament[width&#x3D;1.75cm]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(.5cm,.5cm)&#125;,anchor&#x3D;north east](CNE)   at (Text.north east)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(-.5cm,-.5cm)&#125;,anchor&#x3D;south west](CSW) at (Text.south west)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;61&#125;&#125;;
    \node[inner sep&#x3D;0pt,shift&#x3D;&#123;(.5cm,-.5cm)&#125;,anchor&#x3D;south east](CSE)  at (Text.south east)
         &#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;61&#125;&#125;;
    \pgfornamenthline&#123;CNW&#125;&#123;CNE&#125;&#123;north&#125;&#123;87&#125;
    \pgfornamenthline&#123;CSW&#125;&#123;CSE&#125;&#123;south&#125;&#123;87&#125;
    \pgfornamentvline&#123;CNW&#125;&#123;CSW&#125;&#123;west&#125;&#123;87&#125;
    \pgfornamentvline&#123;CNE&#125;&#123;CSE&#125;&#123;east&#125;&#123;87&#125;
    \end&#123;tikzpicture&#125;

\end&#123;document&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p><img src="/img/sta1.png" alt="sta1"><br><img src="/img/sta2.png" alt="sta2"></p>
<h4 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h4>]]></content>
  </entry>
  <entry>
    <title>mental_assessment</title>
    <url>/mental-assessment/</url>
    <content><![CDATA[<p>A confirmatory program about one example from school’s mathematical modeling class.<br>C++.</p>
<span id="more"></span>
<h4 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;Windows.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h></span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">GCC <span class="token function">optimize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span></span><span class="token string">"Ofast"</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token string">"inline"</span><span class="token expression"><span class="token punctuation">)</span></span></span>
<span class="token comment">//#pragma GCC optimize(3)</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>
<span class="token keyword">short</span> <span class="token keyword">int</span> ct<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ck<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> fu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>
			fu<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		ck<span class="token operator">=</span>ck<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> fu<span class="token operator">*</span>ck<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mid<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>r<span class="token punctuation">;</span>
    <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>mid<span class="token punctuation">)</span> 
			i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>mid<span class="token punctuation">)</span> 
			j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> 
		<span class="token function">qsort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>r<span class="token punctuation">)</span> 
		<span class="token function">qsort</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">struct</span> <span class="token class-name">ans</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">double</span> normal<span class="token punctuation">,</span> tic<span class="token punctuation">,</span> minia<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">qu</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> x<span class="token punctuation">;</span>
	<span class="token keyword">return</span> x<span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">double</span> yy<span class="token operator">=</span><span class="token number">100.0000</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//	freopen("in.txt","r",stdin);</span>
<span class="token comment">//	freopen("out.txt","w",stdout);	</span>
<span class="token comment">//	srand(time(0));	</span>
	<span class="token keyword">double</span> totalnormal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>totaltic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>totalminia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> meantotalnormal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> meantotaltic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> meantotalminia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	ans answer<span class="token punctuation">;</span>
	<span class="token keyword">double</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter the number of times you want to simulate"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"!!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Remember! for each times of simulation, the program will process 1e9 times random data."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"You had better enter a number less than 40."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"And please wait with patience."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
	<span class="token keyword">int</span> start<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> acc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>acc<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>acc<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">+</span>j<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token comment">//cout&lt;&lt;"h1"&lt;&lt;endl;</span>
				<span class="token keyword">double</span> k<span class="token operator">=</span><span class="token number">100</span><span class="token operator">-</span>i<span class="token operator">-</span>j<span class="token punctuation">;</span>
				<span class="token keyword">int</span> normal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> tic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> minia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>t<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>f<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
						<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>
						<span class="token comment">//cout&lt;&lt;p&lt;&lt;endl;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>i<span class="token punctuation">)</span> 
							normal<span class="token operator">++</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>i<span class="token operator">&amp;&amp;</span>p<span class="token operator">&lt;</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span> 
							tic<span class="token operator">++</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">>=</span>i<span class="token operator">+</span>j<span class="token operator">&amp;&amp;</span>p<span class="token operator">&lt;=</span><span class="token number">99</span><span class="token punctuation">)</span>
							minia<span class="token operator">++</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
					ct<span class="token punctuation">[</span>normal<span class="token punctuation">]</span><span class="token punctuation">[</span>tic<span class="token punctuation">]</span><span class="token punctuation">[</span>minia<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
					normal<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					tic<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
					minia<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
				<span class="token punctuation">&#125;</span> 	
				<span class="token keyword">if</span><span class="token punctuation">(</span>ct<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">></span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
					flag<span class="token operator">=</span>ct<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>normal<span class="token operator">=</span>i<span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>tic<span class="token operator">=</span>j<span class="token punctuation">;</span>
					answer<span class="token punctuation">.</span>minia<span class="token operator">=</span>k<span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token comment">//cout&lt;&lt;"h3"&lt;&lt;endl;</span>
				<span class="token function">memset</span><span class="token punctuation">(</span>ct<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		 	<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		cout<span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>normal<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>tic<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>answer<span class="token punctuation">.</span>minia<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		totalnormal<span class="token operator">+=</span>answer<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>
		totaltic<span class="token operator">+=</span>answer<span class="token punctuation">.</span>tic<span class="token punctuation">;</span>
		totalminia<span class="token operator">+=</span>answer<span class="token punctuation">.</span>minia<span class="token punctuation">;</span>
		flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">//cout&lt;&lt;meantotaltic&lt;&lt;endl;</span>
	meantotalnormal<span class="token operator">=</span>totalnormal<span class="token operator">/</span>n<span class="token punctuation">;</span>
	meantotaltic<span class="token operator">=</span>totaltic<span class="token operator">/</span>n<span class="token punctuation">;</span>
	meantotalminia<span class="token operator">=</span>totalminia<span class="token operator">/</span>n<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"average: "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"normal: "</span><span class="token operator">&lt;&lt;</span>meantotalnormal<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"tic: "</span><span class="token operator">&lt;&lt;</span>meantotaltic<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"minia: "</span><span class="token operator">&lt;&lt;</span>meantotalminia<span class="token operator">/</span>yy<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">int</span> timecost<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"time cost= "</span><span class="token operator">&lt;&lt;</span>timecost<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>determinant</title>
    <url>/determinant/</url>
    <content><![CDATA[<h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>This is a program designed for finding the determinant of any matrix.<br>It uses depth-first search to find the Laplace expansion form of each matrix. </p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">mx</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
	<span class="token keyword">int</span> qu<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">det</span><span class="token punctuation">(</span>mx U<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span>m<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span>m<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> mid<span class="token punctuation">;</span>
		mid<span class="token operator">=</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> mid<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>U<span class="token punctuation">.</span>m<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> allmid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>U<span class="token punctuation">.</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			mx subU<span class="token punctuation">;</span>
			subU<span class="token punctuation">.</span>m<span class="token operator">=</span>U<span class="token punctuation">.</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			subU<span class="token punctuation">.</span>n<span class="token operator">=</span>U<span class="token punctuation">.</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>ii<span class="token operator">&lt;=</span>U<span class="token punctuation">.</span>m<span class="token punctuation">;</span>ii<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> jj<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>jj<span class="token operator">&lt;=</span>U<span class="token punctuation">.</span>n<span class="token punctuation">;</span>jj<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
					<span class="token keyword">if</span><span class="token punctuation">(</span>jj<span class="token operator">==</span>i<span class="token punctuation">)</span>
						<span class="token keyword">continue</span><span class="token punctuation">;</span>
					flag<span class="token operator">++</span><span class="token punctuation">;</span>
					subU<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>ii<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token operator">=</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">[</span>jj<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> 
				allmid<span class="token operator">-=</span><span class="token function">det</span><span class="token punctuation">(</span>subU<span class="token punctuation">)</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span> 
				allmid<span class="token operator">+=</span><span class="token function">det</span><span class="token punctuation">(</span>subU<span class="token punctuation">)</span><span class="token operator">*</span>U<span class="token punctuation">.</span>qu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span> allmid<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	mx A<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter the size of the determinant."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter a space between them."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cin<span class="token operator">>></span>A<span class="token punctuation">.</span>m<span class="token operator">>></span>A<span class="token punctuation">.</span>n<span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"Please enter the elements (matrix form)."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cin<span class="token operator">>></span>A<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token string">"| "</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>A<span class="token punctuation">.</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			cout<span class="token operator">&lt;&lt;</span>A<span class="token punctuation">.</span>qu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>	
		<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>A<span class="token punctuation">.</span>m<span class="token punctuation">)</span> 
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"|"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token keyword">else</span> 
			cout<span class="token operator">&lt;&lt;</span><span class="token string">"|"</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span> 
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"  =  "</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>m<span class="token operator">!=</span>A<span class="token punctuation">.</span>n<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"no result !!!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token function">det</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>pass_river</title>
    <url>/pass-river/</url>
    <content><![CDATA[<p><em><strong>Mathematical　Modeling　Homework</strong></em></p>
<h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><p><img src="/img/mm_1/q.png" alt="q"></p>
<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><p><img src="/img/mm_1/r.png" alt="result1"><br><img src="/img/mm_1/rr.jpg" alt="result2"></p>
<span id="more"></span>
<h4 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> m<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">/*
-3 0   1
-2 -1  2
-1 -2  3
0  -3  4
+3  0  5
+2  +1 6
+1  +2 7
0  +3  8
-2 0  a
-1 -1 b
0 -2 c
+2 0 d
+1 +1 e
0 +2 f
-1 0 g
0 -1 h
+1 0 i
0 +1 j
用字符串编码来记录每一步
如果步不对 则删掉 
flag=1 是下一步左下  -1是下一步右上 
*/</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//cout&lt;&lt;"q";</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
		cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">///	cout&lt;&lt;"a"&lt;&lt;endl;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//		cout&lt;&lt;"!";</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span> 
			<span class="token comment">//cout&lt;&lt;"2";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'4'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'c'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'h'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token comment">//cout&lt;&lt;"o";</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'5'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'6'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'7'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'8'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
		
		<span class="token punctuation">&#125;</span> 
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'e'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'f'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'i'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			p<span class="token operator">=</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'j'</span><span class="token punctuation">;</span> 
			m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 2 refers to can&amp;had   标记 </span>
			<span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>flag<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
			p<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token comment">//cout&lt;&lt;"1";</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>	
	
<span class="token punctuation">&#125;</span> 

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
		s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
				m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//[1] down&amp;left 1:can&amp;haven't</span>
		m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//[0] up&amp;right</span>
		m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	m<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//	for(int i=0;i&lt;=5;i++)&#123;</span>
<span class="token comment">//		for(int j=0;j&lt;=5;j++)&#123;</span>
<span class="token comment">//			cout&lt;&lt;m[i][j][0]&lt;&lt;" ";</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		cout&lt;&lt;endl;</span>
<span class="token comment">//	&#125;</span>
<span class="token comment">//	for(int i=0;i&lt;=5;i++)&#123;</span>
<span class="token comment">//		for(int j=0;j&lt;=5;j++)&#123;</span>
<span class="token comment">//			cout&lt;&lt;m[i][j][1]&lt;&lt;" ";</span>
<span class="token comment">//		&#125;</span>
<span class="token comment">//		cout&lt;&lt;endl;</span>
<span class="token comment">//	&#125; </span>
	<span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>affair</title>
    <url>/affair/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>note1</title>
    <url>/note1/</url>
    <content><![CDATA[<p>所有人对所有人在不同地点所展现出来的样子是不同的。但这也是不可避免的，也是人类这一生物为了社群性生活而诞生出的劣根性之一。但这一特性没有什么不好，只要其中一方不依据某种途径得知了他人对待自己的不同评价，这一特性会让人与人之间，至少在表面上，十分和谐。</p>
]]></content>
  </entry>
  <entry>
    <title>note2</title>
    <url>/note2/</url>
    <content><![CDATA[<p>没有永远的神。<br>随着独立思考和知识的增多，你会逐渐发现有的同龄人或者老师或者权威，并不是一直正确的。于是有的人开始因为一个点便全盘否认他，对他说的话完全不听。<br>也有的人坚信他是完全正确的，对他说的话完全的信服并且改变自己原先的观点。<br>但是我觉得没有完美无瑕的东西，信也不能全信，也不能不信。</p>
]]></content>
  </entry>
  <entry>
    <title>share</title>
    <url>/share/</url>
    <content><![CDATA[<p>分享几张图片<br><img src="/img/share/11.jpg" alt="11"><br><img src="/img/share/22.png" alt="22"><br><img src="/img/share/33.png" alt="33"></p>
]]></content>
  </entry>
  <entry>
    <title>note3</title>
    <url>/note3/</url>
    <content><![CDATA[<p>有人说“言多必失”，实际上确实是这样，言语并不能带来什么实际性的东西，但是有的时候会带来不好的后果。<br>如果你常常以“夸”的姿态来说话，确实不容易出问题，但是会让人认为你讨厌。<br>如果你常常以“真实”的姿态来说话，有的时候别人不开心就会出问题。<br>但无论是“夸”还是“真实”，都不会带来什么实质性性的好处，尤其是在社交媒体或者是网络上，有的时候还会招来麻烦，或者被利用。<br>所以最好的方法是什么呢？ 正所谓“三缄其口”<br>少说，或者不说，多听，多看，多想，在评判一件事物之前一定要对这个事物有了解，不要对待任何事情都以玩笑的态度来对待。</p>
]]></content>
  </entry>
  <entry>
    <title>note4</title>
    <url>/note4/</url>
    <content><![CDATA[<p>当你走在大马路上，发生了一个吵架，或者斗殴，或者车祸。看热闹的人永远是最多的，为什么呢？首先，看热闹的成本很少，除非你被砸死，而且能图一乐，<br>周围的群众也可以过一把”裁判的瘾“，很多人想做上帝。<br>而且可以显得平时平平无奇的人，在这个时候很有理性和智慧。所以人们非常喜欢看热闹，无论是图一乐、还是落井下石、还是理中客、还是当圣母假惺惺。都能带给他们无上的快感。</p>
]]></content>
  </entry>
  <entry>
    <title>APCSA_LAB3</title>
    <url>/APCSA-LAB3/</url>
    <content><![CDATA[<p>APCSA课上的奇妙入门难度lab…..。。。。。。<br>和OI比起来  普通人体系的CS确实是很亲民的。。。。<br>就是让你模拟你个自动售货机 要求格式比较严</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> cokeMS<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cash<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Have a Coke! Price: $1.25"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">&lt;</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Insert coin:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">double</span> in<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> input<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>in<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>input<span class="token operator">==</span><span class="token number">5</span><span class="token operator">||</span>input<span class="token operator">==</span><span class="token number">10</span><span class="token operator">||</span>input<span class="token operator">==</span><span class="token number">25</span><span class="token operator">||</span>input<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">+=</span>input<span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Amount entered: "</span><span class="token operator">+</span>cash<span class="token operator">+</span><span class="token string">" cents."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>    
                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ** Rejecting "</span><span class="token operator">+</span>input<span class="token operator">+</span><span class="token string">" cent coin. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please make your selection: \n 1 - Coke \n 2 - Coke Zero \n 3 - Caffeine Free Diet Coke "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Your choice: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> c<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">-=</span><span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Dispensing Coke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">25</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning quarter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning dime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning nickel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">-=</span><span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Dispensing Coke Zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">25</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning quarter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning dime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning nickel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
 
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>    
                <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    cash<span class="token operator">-=</span><span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Dispensing Caffeine Free Diet Coke "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span>cash<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">25</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning quarter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">10</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning dime."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            cash<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">;</span>
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" Returning nickel."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ** No such beverage. Choose another. "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>quicksort</title>
    <url>/quicksort/</url>
    <content><![CDATA[<p>今天忽然到洛谷上看到自己三年前，还没有退役的时候写的代码<br>感慨万千<br>初二初三高一的不学习沉迷lol上课睡觉打游戏从来没写过作业导致了现在废物的我<br>一个快排模板</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">same</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span>
	<span class="token keyword">int</span> j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> tot<span class="token operator">=</span>left<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">||</span>j<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
				tmp<span class="token punctuation">[</span>tot<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>left<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>
		s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">msort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
	<span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token function">msort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">msort</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">same</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>
	cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cin<span class="token operator">>></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token function">msort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>memory</title>
    <url>/memory/</url>
    <content><![CDATA[<p>一些三年前写的代码<br>现在看看确实是一些回忆</p>
<p>Luogu P1018</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">char</span> strings<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
string s<span class="token punctuation">;</span>
string f<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
string <span class="token function">mul</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span>string b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> len1<span class="token punctuation">,</span>len2<span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    len1<span class="token operator">=</span>len2<span class="token operator">=</span> <span class="token number">51</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span><span class="token punctuation">,</span>C<span class="token punctuation">[</span><span class="token number">510</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>len1<span class="token operator">-</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span> <span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len2<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>len2<span class="token operator">-</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span> <span class="token punctuation">;</span>

    <span class="token function">memset</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len2<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token punctuation">;</span>
            C<span class="token punctuation">[</span>i<span class="token operator">+</span>j <span class="token punctuation">]</span> <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">;</span> 
        
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        C<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">;</span>
        C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">;</span>   
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">51</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span><span class="token number">50</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">48</span> <span class="token punctuation">;</span>

    <span class="token keyword">return</span> a <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
string <span class="token function">max</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b <span class="token punctuation">;</span>
    
<span class="token punctuation">&#125;</span>
string <span class="token function">cs</span><span class="token punctuation">(</span><span class="token keyword">int</span> ks<span class="token punctuation">,</span><span class="token keyword">int</span> js<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    strings sum <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">51</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token punctuation">;</span>sum<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span> <span class="token punctuation">;</span>

    <span class="token keyword">int</span> t<span class="token operator">=</span> <span class="token number">50</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>js<span class="token punctuation">;</span>i<span class="token operator">>=</span>ks<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>t<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>

    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span> i<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">51</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>
    cin<span class="token operator">>></span> s <span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t<span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>t<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>t<span class="token operator">++</span><span class="token punctuation">)</span>
            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">mul</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">cs</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token punctuation">;</span>
    <span class="token function">write</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>memory2</title>
    <url>/memory2/</url>
    <content><![CDATA[<p>三年前写过的一道练习题</p>
<p>加分二叉树<br>LuoguP1040</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span>  
<span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> rt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>	
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">way</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span>rt<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token function">way</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>rt<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">way</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

	cin<span class="token operator">>></span>n<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		cin<span class="token operator">>></span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>left<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">int</span> right<span class="token operator">=</span>left<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>v<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
				rt<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;</span>v<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>v<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                rt<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>	
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">+</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    rt<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">way</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>MM_HW_3</title>
    <url>/MM-HW-3/</url>
    <content><![CDATA[<p>用LaTeX写作业有一种爽感<br><img src="/img/MM3.png" alt="MM3_1"><br><img src="/img/MM33.png" alt="MM3_2"></p>
<span id="more"></span>
<p>###Source code###</p>
<pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">\documentclass[12pt]&#123;article&#125;
\title&#123;AP Micro \&amp; Macro Economics Homework  3&#125;
\author&#123;Link Li\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;October 21, 2021&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
\usepackage&#123;fontspec&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;

%\setmainfont&#123;LinLibertine_R.otf&#125;[BoldFont&#x3D;LinLibertine_RZ.otf,ItalicFont&#x3D;LinLibertine_RI.otf,BoldItalicFont&#x3D;LinLibertine_RZI.otf,]
%\setsansfont&#123;LinBiolinum_R.otf&#125;[BoldFont&#x3D;LinBiolinum_RB.otf,ItalicFont&#x3D;LinBiolinum_RI.otf,BoldItalicFont&#x3D;LinBiolinum_RBO.otf]
%\setmonofont&#123;LinLibertine_M.otf&#125;[BoldFont&#x3D;LinLibertine_MB.otf,ItalicFont&#x3D;LinLibertine_MO.otf,BoldItalicFont&#x3D;LinLibertine_MBO.otf]

\setmainfont&#123;Garamond&#125;



\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;37&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;37&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;37&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;37&#125;&#125;&#125;
&#125;

\begin&#123;document&#125;
\maketitle

\section&#123;&#125;

\subsection&#123;i.&#125;
By definition and graphing, we could fathom out that the producer pays the whole tax. Economically intuitively speaking, the more inelastic one side is, the more tax one side will settle. Like if you and your friends go out to have dinner. Only one person is going to pay the bill. There is no doubt that the person who least cares about price will pay the bill. (If they do not know AA)

\subsection&#123;ii.&#125;

No DWL. Graphically, when the supply curve becomes more and more perfectly inelastic, the area of DWL gets closer and closer to zero. Economically intuitively speaking, there is no &quot;can happen but not happen&quot; things. Hence there is no DWL.

\subsection&#123;iii.&#125;
Interest-based products. For instance, I am a sculpture fanatic, and I spend my whole spare time making sculptures. I don&#39;t want to keep my works, and then I sell them. But I never care how much my sculpture can sell. I just love making them. 
\subsection&#123;iv.&#125;
The producer. Because producers are less sensitive(more inelastic) of price. 
\subsection&#123;v.&#125;
It has DWL. The amount of DWL is the triangle.(Sorry the graph is on the next page......)
\begin&#123;figure&#125;[ht]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;1.png&#125;
   \end&#123;figure&#125;   
\subsection&#123;vi.&#125;
1. The price of one kind of necessity in local market. 2. President&#39;s political preference(But the independent variable is the difference president).


\section&#123;&#125;

\subsection&#123;i.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Q&#125;&#123;Q&#125;&#125;&#123;\frac&#123;\Delta P&#125;&#123;P&#125;&#125;&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta P&#125;&#x3D;\frac&#123;30\%&#125;&#123;20\%&#125;&#x3D;1.5$$
e&gt;1
\\elastic
\subsection&#123;ii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;1200-1000&#125;&#123;\frac&#123;1200+1000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;2.4-2&#125;&#123;\frac&#123;2.4+2&#125;&#123;2&#125;&#125;&#125;&#x3D;1$$
unit elastic
\subsection&#123;iii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Qa&#125;&#123;Qa&#125;&#125;&#123;\frac&#123;\Delta Pb&#125;&#123;Pb&#125;&#125;&#x3D;\frac&#123;\%\Delta Qa&#125;&#123;\%\Delta Pb&#125;&#x3D;\frac&#123;25\%&#125;&#123;50\%&#125;&#x3D;0.5$$
e&gt;0\\
substitute
\subsection&#123;iv.&#125;
$$elasticity&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta Income&#125;&#x3D;\frac&#123;\frac&#123;1800-2000&#125;&#123;\frac&#123;2000+1800&#125;&#123;2&#125;&#125;&#125;&#123;20\%&#125;&#x3D;-0.526$$
e&lt;0\\
inferior

\subsection&#123;v.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;300000-220000&#125;&#123;\frac&#123;300000+220000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;3-2&#125;&#123;\frac&#123;3+2&#125;&#123;2&#125;&#125;&#125;&#x3D;0.769$$
e&lt;1\\
inelastic
\subsection&#123;vi.&#125;
Increase.
Because inelastic indicates the $\% \Delta Q&lt; \% \Delta P.$ Then after the price increase, the total revenue will increase because it equals&#x3D;P*Q.


\section&#123;&#125;
Absolutely not. That lose doesn&#39;t brought by trade. Trade only exist when that trade is reciprocal. We can&#39;t says the trade deficit is &quot;lose&quot;. Besides, if a country issue a lot of currency in to make their money devalued in order to have a higher export. We can&#39;t say they &quot;win&quot; money. Likewise, we can&#39;t just care about the numbers in trade without consider anything else.

\section&#123;&#125;


\subsection&#123;i.&#125;
No comparative advantages.\\
Import.\\
(Simply thinking)
\subsection&#123;ii.&#125;
From surplus&#39; perspective, the consumer will win. The gain is larger. Because the increased consumer surplus is larger than the decreased producer surplus. Graphically, the increased consumer surplus: b+c, is larger than the decreased producer surplus: b.
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;im.png&#125;
   \end&#123;figure&#125;  
\subsection&#123;iii.&#125;
The cosumer will still win. But the society(or the market) will relatively lose(compare to the situation without tariff). And the gov also win(if they just care about revenue).


\subsection&#123;iv.&#125;
see
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;imm.png&#125;
   \end&#123;figure&#125; 


\end&#123;document&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>###成品<br><img src="/img/m1.png" alt="m1"><br><img src="/img/m2.png" alt="m2"><br><img src="/img/m3.png" alt="m3"><br><img src="/img/m4.png" alt="m4"><br><img src="/img/m5.png" alt="m5"></p>
]]></content>
  </entry>
  <entry>
    <title>correction1</title>
    <url>/correction1/</url>
    <content><![CDATA[<p>一个还不错的自己写的tex 模板</p>
<pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">

\documentclass[12pt]&#123;article&#125;
\title&#123;AP Micro \&amp; Macro Economics Homework  3&#125;
\author&#123;Link Li\pgfornament[width&#x3D;0.7cm]&#123;94&#125;&#125;
\date&#123;October 21, 2021&#125;
\usepackage&#123;graphicx&#125;
\usepackage&#123;tikz&#125;
\usepackage&#123;geometry&#125;
\usepackage&#123;qrcode&#125;
\usepackage&#123;pgfornament&#125;
\usepackage&#123;eso-pic&#125;
\usepackage&#123;tikzrput&#125;
\usepackage&#123;fontspec&#125;
%\usepackage&#123;boondox-cal&#125;
%\usepackage&#123;amsmath&#125;

%\setmainfont&#123;LinLibertine_R.otf&#125;[BoldFont&#x3D;LinLibertine_RZ.otf,ItalicFont&#x3D;LinLibertine_RI.otf,BoldItalicFont&#x3D;LinLibertine_RZI.otf,]
%\setsansfont&#123;LinBiolinum_R.otf&#125;[BoldFont&#x3D;LinBiolinum_RB.otf,ItalicFont&#x3D;LinBiolinum_RI.otf,BoldItalicFont&#x3D;LinBiolinum_RBO.otf]
%\setmonofont&#123;LinLibertine_M.otf&#125;[BoldFont&#x3D;LinLibertine_MB.otf,ItalicFont&#x3D;LinLibertine_MO.otf,BoldItalicFont&#x3D;LinLibertine_MBO.otf]

\setmainfont&#123;Garamond&#125;



\usetikzlibrary&#123;positioning, arrows.meta, chains, scopes, calc&#125;
\newcommand\AtPageUpperRight[1]&#123;\AtPageUpperLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\newcommand\AtPageLowerRight[1]&#123;\AtPageLowerLeft&#123;%
 \put(\LenToUnit&#123;\paperwidth&#125;,\LenToUnit&#123;0\paperheight&#125;)&#123;#1&#125;%
 &#125;&#125;%
\AddToShipoutPictureBG&#123;%
   \AtPageUpperLeft&#123;\put(0,-25)&#123;\pgfornament[width&#x3D;1.75cm]&#123;37&#125;&#125;&#125;
   \AtPageUpperRight&#123;\put(-50,-25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;v]&#123;37&#125;&#125;&#125;
   \AtPageLowerLeft&#123;\put(0,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;h]&#123;37&#125;&#125;&#125;
   \AtPageLowerRight&#123;\put(-50,25)&#123;\pgfornament[width&#x3D;1.75cm,symmetry&#x3D;c]&#123;37&#125;&#125;&#125;
&#125;

\begin&#123;document&#125;
\maketitle

\section&#123;&#125;

\subsection&#123;i.&#125;
By definition and graphing, we could fathom out that the producer pays the whole tax. Economically intuitively speaking, the more inelastic one side is, the more tax one side will settle. Like if you and your friends go out to have dinner. Only one person is going to pay the bill. There is no doubt that the person who least cares about price will pay the bill. (If they do not know AA)

\subsection&#123;ii.&#125;

No DWL. Graphically, when the supply curve becomes more and more perfectly inelastic, the area of DWL gets closer and closer to zero. Economically intuitively speaking, there is no &quot;can happen but not happen&quot; things. Hence there is no DWL.

\subsection&#123;iii.&#125;
Interest-based products. For instance, I am a sculpture fanatic, and I spend my whole spare time making sculptures. I don&#39;t want to keep my works, and then I sell them. But I never care how much my sculpture can sell. I just love making them. 
\subsection&#123;iv.&#125;
The producer. Because producers are less sensitive(more inelastic) of price. 
\subsection&#123;v.&#125;
It has DWL. The amount of DWL is the triangle.(Sorry the graph is on the next page......)
\begin&#123;figure&#125;[ht]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;1.png&#125;
   \end&#123;figure&#125;   
\subsection&#123;vi.&#125;
1. The price of one kind of necessity in local market. 2. President&#39;s political preference(But the independent variable is the difference president).


\section&#123;&#125;

\subsection&#123;i.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Q&#125;&#123;Q&#125;&#125;&#123;\frac&#123;\Delta P&#125;&#123;P&#125;&#125;&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta P&#125;&#x3D;\frac&#123;30\%&#125;&#123;20\%&#125;&#x3D;1.5$$
e&gt;1
\\elastic
\subsection&#123;ii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;1200-1000&#125;&#123;\frac&#123;1200+1000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;2.4-2&#125;&#123;\frac&#123;2.4+2&#125;&#123;2&#125;&#125;&#125;&#x3D;1$$
unit elastic
\subsection&#123;iii.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;\Delta Qa&#125;&#123;Qa&#125;&#125;&#123;\frac&#123;\Delta Pb&#125;&#123;Pb&#125;&#125;&#x3D;\frac&#123;\%\Delta Qa&#125;&#123;\%\Delta Pb&#125;&#x3D;\frac&#123;25\%&#125;&#123;50\%&#125;&#x3D;0.5$$
e&gt;0\\
substitute
\subsection&#123;iv.&#125;
$$elasticity&#x3D;\frac&#123;\%\Delta Q&#125;&#123;\%\Delta Income&#125;&#x3D;\frac&#123;\frac&#123;1800-2000&#125;&#123;\frac&#123;2000+1800&#125;&#123;2&#125;&#125;&#125;&#123;20\%&#125;&#x3D;-0.526$$
e&lt;0\\
inferior

\subsection&#123;v.&#125;
$$elasticity&#x3D;\frac&#123;\frac&#123;300000-220000&#125;&#123;\frac&#123;300000+220000&#125;&#123;2&#125;&#125;&#125;&#123;\frac&#123;3-2&#125;&#123;\frac&#123;3+2&#125;&#123;2&#125;&#125;&#125;&#x3D;0.769$$
e&lt;1\\
inelastic
\subsection&#123;vi.&#125;
Increase.
Because inelastic indicates the $\% \Delta Q&lt; \% \Delta P.$ Then after the price increase, the total revenue will increase because it equals&#x3D;P*Q.


\section&#123;&#125;
Absolutely not. That lose doesn&#39;t brought by trade. Trade only exist when that trade is reciprocal. We can&#39;t says the trade deficit is &quot;lose&quot;. Besides, if a country issue a lot of currency in to make their money devalued in order to have a higher export. We can&#39;t say they &quot;win&quot; money. Likewise, we can&#39;t just care about the numbers in trade without consider anything else.

\section&#123;&#125;


\subsection&#123;i.&#125;
No comparative advantages.\\
Import.\\
(Simply thinking)
\subsection&#123;ii.&#125;
From surplus&#39; perspective, the consumer will win. The gain is larger. Because the increased consumer surplus is larger than the decreased producer surplus. Graphically, the increased consumer surplus: b+c, is larger than the decreased producer surplus: b.
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;im.png&#125;
   \end&#123;figure&#125;  
\subsection&#123;iii.&#125;
The cosumer will still win. But the society(or the market) will relatively lose(compare to the situation without tariff). And the gov also win(if they just care about revenue).


\subsection&#123;iv.&#125;
see
\begin&#123;figure&#125;[h]
   \centering
   \includegraphics[scale&#x3D;0.6]&#123;imm.png&#125;
   \end&#123;figure&#125; 


\end&#123;document&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>mignon1</title>
    <url>/mignon1/</url>
    <content><![CDATA[<p>mignon为什么画的如此之好？<br><img src="/img/mignon/m1.jpg" alt="haha"><br>Source: <a href="https://www.pixiv.net/en/artworks/91206125">https://www.pixiv.net/en/artworks/91206125</a><br>By Pixiv User : Mignon</p>
]]></content>
  </entry>
  <entry>
    <title>illu1</title>
    <url>/illu1/</url>
    <content><![CDATA[<p>share some beautiful illustrations<br><img src="/img/mignon/8.jpg" alt="8"></p>
<p><img src="/img/mignon/2.jpg" alt="2"><br><img src="/img/mignon/0.jpg" alt="0"></p>
<span id="more"></span>
<p><img src="/img/mignon/1.jpg" alt="1"><br><img src="/img/mignon/3.jpg" alt="3"><br><img src="/img/mignon/4.jpg" alt="4"><br><img src="/img/mignon/5.jpg" alt="5"><br><img src="/img/mignon/6.jpg" alt="6"><br><img src="/img/mignon/7.jpg" alt="7"></p>
<p><img src="/img/mignon/0.jpg" alt="0"></p>
<p>Source: <a href="https://www.pixivision.net/zh/a/2189">https://www.pixivision.net/zh/a/2189</a></p>
]]></content>
  </entry>
  <entry>
    <title>Lab_Name</title>
    <url>/Lab-Name/</url>
    <content><![CDATA[<p>可以参考一下，虽然我没加注释吧。。。。<br>凑活一下。。。<br>LAB Requirement<br><img src="/img/CSALAB/name.png" alt="req"></p>
<p>The Name Class</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> first<span class="token punctuation">,</span>middle<span class="token punctuation">,</span>last<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token class-name">String</span> f<span class="token punctuation">,</span> <span class="token class-name">String</span> m<span class="token punctuation">,</span> <span class="token class-name">String</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        first<span class="token operator">=</span>f<span class="token punctuation">;</span>
        middle<span class="token operator">=</span>m<span class="token punctuation">;</span>
        last<span class="token operator">=</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> middle<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> last<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">firstMiddleLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>middle<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>last<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">lastFirstMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> last<span class="token operator">+</span><span class="token string">", "</span><span class="token operator">+</span>first<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>middle<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Name</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>middle<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>last<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">initials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>middle<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>last<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>middle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>last<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The TestName Class</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestName</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter the name of the first person. Format: firstname middlename lastname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Name</span> person1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Enter the name of the second person. Format: firstname middlename lastname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Name</span> person2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">firstMiddleLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">lastFirstMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">initials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">firstMiddleLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">lastFirstMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">initials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"They have the same name."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"They don't have the same name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>ML</title>
    <url>/ML/</url>
    <content><![CDATA[<p><img src="/img/DeepLearning.jpg" alt="DL"></p>
<p>Free Download:</p>
<p>PRML:<br><a href="https://www.microsoft.com/en-us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf">Pattern Recognition and Machine Learning</a></p>
<p>DeepLearning:<br><a href="https://github.com/janishar/mit-deep-learning-book-pdf/blob/master/complete-book-bookmarked-pdf/deeplearningbook.pdf">Deep Learning</a><br><a href="https://www.deeplearningbook.org/">Web</a></p>
]]></content>
  </entry>
  <entry>
    <title>arr2D</title>
    <url>/arr2D/</url>
    <content><![CDATA[<p>双重数组的练习代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pitch</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pitchArray<span class="token operator">=</span><span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#123;</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token comment">// initialization "JUST IN CASE"</span>
        <span class="token keyword">int</span> pitchBest<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pitchBest<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            pitchBest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> pitchWorst<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pitchWorst<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            pitchWorst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> pitchSum<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pitchSum<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            pitchSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> pitchAV<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pitchAV<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            pitchAV<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> count<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pitchAV<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> tt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tt<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            tt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>pitchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>pitchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>pitchBest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 
                    pitchBest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pitchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>pitchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>pitchWorst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 
                    pitchWorst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pitchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                pitchSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>pitchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                tt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>pitchArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    
            <span class="token punctuation">&#125;</span>
            pitchAV<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pitchSum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pitcher#"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" pitched "</span><span class="token operator">+</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" games. Highest: "</span><span class="token operator">+</span>pitchBest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" Lowest: "</span><span class="token operator">+</span>pitchWorst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" total was: "</span><span class="token operator">+</span>tt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" average was: "</span><span class="token operator">+</span>pitchAV<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Which guy's stats do you want to see? If you want to quit enter\"0\"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> n<span class="token punctuation">;</span>
                n<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>n<span class="token operator">></span>pitchArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid Input."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pitcher#"</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token string">" pitched "</span><span class="token operator">+</span>count<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" games. Highest: "</span><span class="token operator">+</span>pitchBest<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" Lowest: "</span><span class="token operator">+</span>pitchWorst<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" total was: "</span><span class="token operator">+</span>tt<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" average was: "</span><span class="token operator">+</span>pitchAV<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Copyright : <a href="https://www.pixiv.net/en/artworks/93491586">https://www.pixiv.net/en/artworks/93491586</a><br><img src="/img/wow.jpg" alt="wow"></p>
]]></content>
  </entry>
</search>
